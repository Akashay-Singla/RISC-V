$date
	Thu Jun 17 09:05:47 2021
$end

$version
	Synopsys VCS version I-2014.03-2
$end

$timescale
	1ps
$end

$comment Csum: 1 06db3e4f2280ea52 $end


$scope module testbench $end
$var reg 32 ! instr [31:0] $end
$var reg 1 " clk $end

$scope module u1 $end
$var wire 32 ! instr [31:0] $end
$var wire 1 " clk $end
$var reg 4 # Alu_opr [3:0] $end
$var reg 4 $ load_flag [3:0] $end
$var reg 2 % store_flag [1:0] $end
$var reg 5 & Rd_addr [4:0] $end
$var reg 5 ' Rs1_addr [4:0] $end
$var reg 5 ( Rs2_addr [4:0] $end
$var wire 64 ) Alu_output [63:0] $end
$var wire 64 * Rs1_data [63:0] $end
$var wire 64 + Rs2_data [63:0] $end
$var wire 64 , input2_data [63:0] $end
$var reg 1 - reg_write_en $end
$var reg 1 . mem_write_en $end
$var reg 1 / mem_read_en $end
$var wire 64 0 reg_file_input [63:0] $end
$var wire 64 1 mem_data_output [63:0] $end

$scope module u2 $end
$var wire 32 ! input_inst [31:0] $end
$var reg 4 # Alu_opr [3:0] $end
$var reg 4 $ load_flag [3:0] $end
$var reg 2 % store_flag [1:0] $end
$var reg 5 & Rd_addr [4:0] $end
$var reg 5 ' Rs1_addr [4:0] $end
$var reg 5 ( Rs2_addr [4:0] $end
$var reg 1 - reg_write_en $end
$var reg 1 . mem_write_en $end
$var reg 1 / mem_read_en $end

$scope function Alu_opr_R $end
$var reg 4 2 Alu_opr_R [3:0] $end
$var reg 3 3 func3 [2:0] $end
$var reg 7 4 func7 [0:6] $end
$upscope $end


$scope function Alu_opr_I $end
$var reg 3 5 Alu_opr_I [2:0] $end
$var reg 3 6 func3 [2:0] $end
$upscope $end


$scope function store_format $end
$var reg 2 7 store_format [1:0] $end
$var reg 3 8 func3 [2:0] $end
$upscope $end


$scope function load_format $end
$var reg 3 9 load_format [2:0] $end
$var reg 3 : func3 [2:0] $end
$upscope $end

$upscope $end


$scope module u3 $end
$var wire 1 - Wen $end
$var wire 5 ' Rs1_addr [4:0] $end
$var wire 5 ( Rs2_addr [4:0] $end
$var wire 5 & Rd_addr [4:0] $end
$var wire 64 0 write_data [63:0] $end
$var wire 64 * Rs1_data [63:0] $end
$var wire 64 + Rs2_data [63:0] $end
$var integer 32 ; i $end
$upscope $end


$scope module u4 $end
$var wire 4 # Alu_opr [3:0] $end
$var wire 64 * IP_data1 [63:0] $end
$var wire 64 , IP_data2 [63:0] $end
$var reg 64 < OP_data [63:0] $end
$upscope $end


$scope module U5 $end
$var wire 3 = load_format [2:0] $end
$var wire 2 % store_format [1:0] $end
$var wire 1 . mem_write_en $end
$var wire 1 / mem_read_en $end
$var wire 64 ) mem_addr [63:0] $end
$var wire 64 + mem_data_input [63:0] $end
$var reg 64 > mem_data_output [63:0] $end
$var integer 32 ? i $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end

#0
$dumpvars
0"
0/
0.
1-
b0000 #
bxxx 5
bxxx 6
b0000 2
b000 3
b0000000 4
b0000000000000000000001000101011001110001001100000010100110010100 )
b0000000000000000000001000101011001110001001100000010100110010100 <
b01001 &
b10100 '
b0000000000000000000001000101011001110000000100000010001111010010 *
b10101 (
b0000000000000000000000000000000000000001001000000000010111000010 +
b00000000000000000000011111111111 ?
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx >
b00000000000000000000000000100000 ;
b0000000000000000000000000000000000000001001000000000010111000010 ,
b00000001010110100000010010110011 !
bxxxx $
bxxx :
bxxx 9
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 1
b0000000000000000000001000101011001110001001100000010100110010100 0
bxx %
bxxx 8
bxx 7
bxxx =
$end
#5000
1"
#10000
0"
#15000
1"
#20000
0"
#25000
1"
#30000
b00000000000101001000010110010011 !
0"
b000 6
b000 5
b01001 '
b0000000000000000000001000101011001110001001100000010100110010100 *
bzzzzz (
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx +
b01011 &
b0000000000000000000000000000000000000000000000000000000000000001 ,
b0000000000000000000001000101011001110001001100000010100110010101 <
b0000000000000000000001000101011001110001001100000010100110010101 )
b0000000000000000000001000101011001110001001100000010100110010101 0
#35000
1"
#40000
0"
#45000
1"
#50000
0"
#55000
1"
#60000
b00001110100101010011100000100011 !
0"
b011 8
b11 7
b01010 '
b0000000000000000000000000000000000000000000000000000000000000010 *
b01001 (
b0000000000000000000001000101011001110001001100000010100110010100 +
bzzzzz &
b11 %
0-
1.
b0000000000000000000000000000000000000000000000000000000011110000 ,
b0000000000000000000000000000000000000000000000000000000011110010 <
b0000000000000000000000000000000000000000000000000000000011110010 )
b0000000000000000000000000000000000000000000000000000000011110010 0
#65000
1"
#70000
0"
#75000
1"
#80000
0"
#85000
1"
#90000
b00001111000001010011001010000011 !
0"
b011 :
b101 9
bzzzzz (
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx +
b00101 &
1-
0.
1/
b0101 $
b101 =
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 0
b0000000000000000000001000101011001110001001100000010100110010100 >
b0000000000000000000001000101011001110001001100000010100110010100 1
b0000000000000000000001000101011001110001001100000010100110010100 0
#95000
1"
#100000
0"
#105000
1"
#110000
0"
#115000
1"
#120000
0"
#125000
1"
