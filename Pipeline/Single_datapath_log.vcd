$date
	Fri Jun 25 21:52:03 2021
$end

$version
	Synopsys VCS version I-2014.03-2
$end

$timescale
	1ps
$end

$comment Csum: 1 269ae253970cece3 $end


$scope module Single_datapath $end
$var wire 1 ! clk $end
$var wire 1 " br_taken $end
$var wire 1 # br_en $end
$var reg 1 $ br_taken_buff $end
$var reg 1 % br_en_buff $end
$var reg 1 & br_en_buff2 $end
$var wire 64 ' br_addr [63:0] $end
$var wire 32 ( pc [31:0] $end
$var reg 32 ) pc_buff [31:0] $end
$var reg 32 * pc_buff2 [31:0] $end
$var wire 32 + instr [31:0] $end
$var reg 32 , instr_buff [31:0] $end
$var wire 64 - Alu_output [63:0] $end
$var reg 64 . Alu_output_buff [63:0] $end
$var reg 64 / Alu_output_buff2 [63:0] $end
$var wire 64 0 reg_file_input [63:0] $end
$var wire 64 1 mem_data_output [63:0] $end
$var reg 64 2 mem_data_output_buff [63:0] $end
$var wire 1 3 sign_bit $end
$var reg 1 4 sign_bit_buff $end
$var wire 64 5 pc_offset [63:0] $end
$var wire 1 6 reg_wr_en $end
$var wire 1 7 Rs2_en $end
$var reg 1 8 reg_wr_en_buff $end
$var reg 1 9 reg_wr_en_buff2 $end
$var reg 1 : reg_wr_en_buff3 $end
$var reg 1 ; Rs2_en_buff $end
$var wire 1 < mem_rd_en $end
$var wire 1 = mem_wr_en $end
$var reg 1 > mem_rd_en_buff $end
$var reg 1 ? mem_rd_en_buff2 $end
$var reg 1 @ mem_rd_en_buff3 $end
$var reg 1 A mem_wr_en_buff $end
$var reg 1 B mem_wr_en_buff1 $end
$var reg 1 C mem_wr_en_buff2 $end
$var reg 1 D mem_wr_en_buff3 $end
$var wire 4 E Alu_opr [3:0] $end
$var wire 4 F load_opr [3:0] $end
$var reg 4 G Alu_opr_buff [3:0] $end
$var reg 4 H Alu_opr_buff2 [3:0] $end
$var reg 4 I load_opr_buff [3:0] $end
$var reg 4 J load_opr_buff2 [3:0] $end
$var wire 2 K store_opr [1:0] $end
$var reg 4 L store_opr_buff [3:0] $end
$var reg 4 M store_opr_buff2 [3:0] $end
$var wire 5 N Rd_addr [4:0] $end
$var wire 5 O Rs1_addr [4:0] $end
$var wire 5 P Rs2_addr [4:0] $end
$var reg 5 Q Rd_addr_buff [4:0] $end
$var reg 5 R Rd_addr_buff2 [4:0] $end
$var reg 5 S Rd_addr_buff3 [4:0] $end
$var wire 64 T Rs1_data [63:0] $end
$var wire 64 U Rs2_data [63:0] $end
$var wire 64 V input2_data [63:0] $end
$var reg 64 W Rs1_data_buff [63:0] $end
$var reg 64 X Rs2_data_buff [63:0] $end
$var reg 64 Y Rs2_data_buff2 [63:0] $end
$var wire 12 Z imm_val [11:0] $end
$var reg 12 [ imm_val_buff [11:0] $end
$var wire 1 \ pc_st1 $end
$var wire 1 ] instr_st1_buff $end

$scope module U1 $end
$var reg 1 ^ clk $end
$upscope $end


$scope module U2 $end
$var wire 1 ! clk $end
$var wire 1 _ branch_en $end
$var wire 64 ` branch_pc [63:0] $end
$var reg 64 a PC [63:0] $end
$upscope $end


$scope module U3 $end
$var wire 32 b PC [31:0] $end
$var reg 32 c instr [31:0] $end
$upscope $end


$scope module U4 $end
$var wire 32 d input_inst [31:0] $end
$var reg 4 e Alu_opr [3:0] $end
$var reg 4 f load_flag [3:0] $end
$var reg 2 g store_flag [1:0] $end
$var reg 5 h Rd_addr [4:0] $end
$var reg 5 i Rs1_addr [4:0] $end
$var reg 5 j Rs2_addr [4:0] $end
$var reg 1 k reg_write_en $end
$var reg 1 l mem_write_en $end
$var reg 1 m mem_read_en $end
$var reg 1 n branch_en $end
$var reg 1 o Rs2_en $end

$scope function Alu_opr_R $end
$var reg 4 p Alu_opr_R [3:0] $end
$var reg 3 q func3 [2:0] $end
$var reg 7 r func7 [0:6] $end
$upscope $end


$scope function Alu_opr_I $end
$var reg 3 s Alu_opr_I [2:0] $end
$var reg 3 t func3 [2:0] $end
$upscope $end


$scope function Alu_opr_B $end
$var reg 3 u Alu_opr_B [2:0] $end
$var reg 3 v func3 [2:0] $end
$upscope $end


$scope function store_format $end
$var reg 2 w store_format [1:0] $end
$var reg 3 x func3 [2:0] $end
$upscope $end


$scope function load_format $end
$var reg 3 y load_format [2:0] $end
$var reg 3 z func3 [2:0] $end
$upscope $end

$upscope $end


$scope module U5 $end
$var wire 1 6 Wen $end
$var wire 5 O Rs1_addr [4:0] $end
$var wire 5 P Rs2_addr [4:0] $end
$var wire 5 S Rd_addr [4:0] $end
$var wire 64 0 write_data [63:0] $end
$var wire 64 { Rs1_data [63:0] $end
$var wire 64 | Rs2_data [63:0] $end
$var integer 32 } i $end
$upscope $end


$scope module U6 $end
$var wire 4 G Alu_opr [3:0] $end
$var wire 64 ~ IP_data1 [63:0] $end
$var wire 64 V IP_data2 [63:0] $end
$var reg 64 "! OP_data [63:0] $end
$var reg 1 "" branch_mux $end
$upscope $end


$scope module U7 $end
$var wire 3 "# load_format [2:0] $end
$var wire 2 "$ store_format [1:0] $end
$var wire 1 C mem_write_en $end
$var wire 1 ? mem_read_en $end
$var wire 64 . mem_addr [63:0] $end
$var wire 64 Y mem_data_input [63:0] $end
$var reg 64 "% mem_data_output [63:0] $end
$var integer 32 "& i $end
$upscope $end

$upscope $end

$enddefinitions $end

#0
$dumpvars
x7
x;
0^
xo
0n
0#
x%
x&
x"
x$
x_
x""
0!
z]
0<
x>
x?
x@
0m
0=
xA
xB
xC
xD
0l
0\
06
x8
x9
x:
0k
x3
x4
bzzzz E
bxxx u
bxxx v
bxxx s
bxxx t
bxxxx p
bxxx q
bxxxxxxx r
bxxxx G
bxxxx H
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx .
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ~
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "!
b0000000000000000000000000000000000000000000000000000000000000000 a
bzzzzz N
bxxxxx Q
bxxxxx R
bxxxxx S
bzzzzz O
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx T
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx W
bzzzzz P
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx U
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx X
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Y
b00000000000000000000000000000000 b
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx c
bzzzz e
bzzzzz h
bzzzzz i
bzzzzz j
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx |
b00000000000000000000011111111111 "&
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "%
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx '
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx `
b00000000000000000000000000100000 }
bxxxxxxxxxxxx Z
bxxxxxxxxxxxx [
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx V
b0000000000000000000000000000000z d
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx +
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,
bxxxx f
bxxx z
bxxx y
bxxxx F
bxxxx I
bxxxx J
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 1
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 2
bzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz (
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx )
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx *
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx0 5
bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 0
bxx g
bxxx x
bxx w
bxx K
bxxxx L
bxxxx M
bxxx "#
bxx "$
$end
#15000
1^
1!
bzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz )
bzzzz G
b00xx L
bzzzzz Q
0A
0>
0%
08
b0000000000000000000000000000000000000000000000000000000000000100 a
#30000
0^
0!
#45000
1^
1!
bzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz *
b00xx M
0?
0C
0&
0_
09
bzzzzz R
b0000000000000000000000000000000000000000000000000000000000001000 a
#60000
0^
0!
#75000
1^
1!
0@
0D
0:
bzzzzz S
b0000000000000000000000000000000000000000000000000000000000001100 a
#90000
0^
0!
#105000
1^
1!
b0000000000000000000000000000000000000000000000000000000000010000 a
#120000
0^
0!
#135000
1^
1!
b0000000000000000000000000000000000000000000000000000000000010100 a
#150000
0^
0!
#165000
1^
1!
b0000000000000000000000000000000000000000000000000000000000011000 a
#180000
0^
0!
#195000
1^
1!
b0000000000000000000000000000000000000000000000000000000000011100 a
#210000
0^
0!
#225000
1^
1!
b0000000000000000000000000000000000000000000000000000000000100000 a
#240000
0^
0!
#255000
1^
1!
b0000000000000000000000000000000000000000000000000000000000100100 a
#270000
0^
0!
#285000
1^
1!
b0000000000000000000000000000000000000000000000000000000000101000 a
